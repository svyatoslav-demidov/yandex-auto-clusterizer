<?xml version="1.0" encoding="UTF-8"?>
<project name="yandex-auto-clusterizer" default="all">
  
  
  <property file="yandex-auto-clusterizer.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.6" value="${jdk.home.1.6}/bin"/>
  <path id="jdk.classpath.1.6">
    <fileset dir="${jdk.home.1.6}">
      <include name="jre/lib/alt-rt.jar"/>
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/mail-1.4.3-rc1-sources.jar"/>
      <include name="jre/lib/mail-1.4.3-rc1.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.6}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.6}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.6"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.lib.classpath">
    <fileset dir="${basedir}/core/lib/httpclient">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/jakarta-commons">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/jetbrains">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/jetty">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/rhino">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/saxon">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/spring">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/core/lib/xalan">
      <patternset refid="library.patterns"/>
    </fileset>
    <fileset dir="${basedir}/db/lib">
      <patternset refid="library.patterns"/>
    </fileset>
    <pathelement location="${basedir}/core/lib/junit-4.0.jar"/>
    <pathelement location="${basedir}/core/lib/log4j-1.2.15.jar"/>
  </path>
  
  <path id="library.webharvest.classpath">
    <pathelement location="${basedir}/webharvest/activation.jar"/>
    <pathelement location="${basedir}/webharvest/bsh.jar"/>
    <pathelement location="${basedir}/webharvest/commons-cli-1.1.jar"/>
    <pathelement location="${basedir}/webharvest/commons-codec-1.3.jar"/>
    <pathelement location="${basedir}/webharvest/commons-collections-3.1.jar"/>
    <pathelement location="${basedir}/webharvest/commons-email-1.1.jar"/>
    <pathelement location="${basedir}/webharvest/commons-httpclient-3.1.jar"/>
    <pathelement location="${basedir}/webharvest/commons-logging.jar"/>
    <pathelement location="${basedir}/webharvest/commons-net-ftp-2.0.jar"/>
    <pathelement location="${basedir}/webharvest/groovy-all-1.0.jar"/>
    <pathelement location="${basedir}/webharvest/htmlcleaner.jar"/>
    <pathelement location="${basedir}/webharvest/js.jar"/>
    <pathelement location="${basedir}/webharvest/log4j-1.2.13.jar"/>
    <pathelement location="${basedir}/webharvest/mail.jar"/>
    <pathelement location="${basedir}/webharvest/saxon9-dom.jar"/>
    <pathelement location="${basedir}/webharvest/saxon9.jar"/>
    <pathelement location="${basedir}/webharvest/webharvest_2.jar"/>
  </path>
  
  <!-- Modules -->
  
  
  <!-- Module core -->
  
  <dirname property="module.core.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.core" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.core" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.core" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.core" value="${compiler.args}"/>
  
  <property name="core.output.dir" value="${module.core.basedir}/out/production/core"/>
  <property name="core.testoutput.dir" value="${module.core.basedir}/out/test/core"/>
  
  <path id="core.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="core.module.production.classpath">
    <path refid="${module.jdk.classpath.core}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="core.runtime.production.module.classpath">
    <pathelement location="${core.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="core.module.classpath">
    <path refid="${module.jdk.classpath.core}"/>
    <pathelement location="${core.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="core.runtime.module.classpath">
    <pathelement location="${core.testoutput.dir}"/>
    <pathelement location="${core.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.core">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.core">
    <patternset refid="excluded.from.module.core"/>
  </patternset>
  
  <path id="core.module.sourcepath">
    <dirset dir="${module.core.basedir}/core">
      <include name="src/java"/>
    </dirset>
  </path>
  
  <path id="core.module.test.sourcepath">
    <dirset dir="${module.core.basedir}/core">
      <include name="src/test"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.core" depends="compile.module.core.production,compile.module.core.tests" description="Compile module core"/>
  
  <target name="compile.module.core.production" description="Compile module core; production classes">
    <mkdir dir="${core.output.dir}"/>
    <javac destdir="${core.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.core}/javac">
      <compilerarg line="${compiler.args.core}"/>
      <bootclasspath refid="core.module.bootclasspath"/>
      <classpath refid="core.module.production.classpath"/>
      <src refid="core.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.core"/>
    </javac>
    
    <copy todir="${core.output.dir}">
      <fileset dir="${module.core.basedir}/core/src/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.core.tests" depends="compile.module.core.production" description="compile module core; test classes" unless="skip.tests">
    <mkdir dir="${core.testoutput.dir}"/>
    <javac destdir="${core.testoutput.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.core}/javac">
      <compilerarg line="${compiler.args.core}"/>
      <bootclasspath refid="core.module.bootclasspath"/>
      <classpath refid="core.module.classpath"/>
      <src refid="core.module.test.sourcepath"/>
      <patternset refid="excluded.from.compilation.core"/>
    </javac>
    
    <copy todir="${core.testoutput.dir}">
      <fileset dir="${module.core.basedir}/core/src/test">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="clean.module.core" description="cleanup module">
    <delete dir="${core.output.dir}"/>
    <delete dir="${core.testoutput.dir}"/>
  </target>
  
  
  <!-- Module db -->
  
  <dirname property="module.db.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.db" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.db" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.db" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.db" value="${compiler.args}"/>
  
  <property name="db.output.dir" value="${module.db.basedir}/out/production/db"/>
  <property name="db.testoutput.dir" value="${module.db.basedir}/out/test/db"/>
  
  <path id="db.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="db.module.production.classpath">
    <path refid="${module.jdk.classpath.db}"/>
    <pathelement location="${core.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="db.runtime.production.module.classpath">
    <pathelement location="${db.output.dir}"/>
    <path refid="core.runtime.production.module.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="db.module.classpath">
    <path refid="${module.jdk.classpath.db}"/>
    <pathelement location="${db.output.dir}"/>
    <pathelement location="${core.testoutput.dir}"/>
    <pathelement location="${core.output.dir}"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="db.runtime.module.classpath">
    <pathelement location="${db.testoutput.dir}"/>
    <pathelement location="${db.output.dir}"/>
    <path refid="core.runtime.module.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.db">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.db">
    <patternset refid="excluded.from.module.db"/>
  </patternset>
  
  <path id="db.module.sourcepath">
    <dirset dir="${module.db.basedir}/db">
      <include name="src/java"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.db" depends="compile.module.db.production,compile.module.db.tests" description="Compile module db"/>
  
  <target name="compile.module.db.production" depends="compile.module.core" description="Compile module db; production classes">
    <mkdir dir="${db.output.dir}"/>
    <javac destdir="${db.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.db}/javac">
      <compilerarg line="${compiler.args.db}"/>
      <bootclasspath refid="db.module.bootclasspath"/>
      <classpath refid="db.module.production.classpath"/>
      <src refid="db.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.db"/>
    </javac>
    
    <copy todir="${db.output.dir}">
      <fileset dir="${module.db.basedir}/db/src/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.db.tests" depends="compile.module.db.production" description="compile module db; test classes" unless="skip.tests"/>
  
  <target name="clean.module.db" description="cleanup module">
    <delete dir="${db.output.dir}"/>
    <delete dir="${db.testoutput.dir}"/>
  </target>
  
  
  <!-- Module yandex-auto-clusterizer -->
  
  <dirname property="module.yandex-auto-clusterizer.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.yandex-auto-clusterizer" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.yandex-auto-clusterizer" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.yandex-auto-clusterizer" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.yandex-auto-clusterizer" value="${compiler.args}"/>
  
  <property name="yandex-auto-clusterizer.output.dir" value="${module.yandex-auto-clusterizer.basedir}/out/production/yandex-auto-clusterizer"/>
  <property name="yandex-auto-clusterizer.testoutput.dir" value="${module.yandex-auto-clusterizer.basedir}/out/test/yandex-auto-clusterizer"/>
  
  <path id="yandex-auto-clusterizer.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="yandex-auto-clusterizer.module.production.classpath">
    <path refid="${module.jdk.classpath.yandex-auto-clusterizer}"/>
    <pathelement location="${db.output.dir}"/>
    <pathelement location="${core.output.dir}"/>
    <path refid="library.webharvest.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="yandex-auto-clusterizer.runtime.production.module.classpath">
    <pathelement location="${yandex-auto-clusterizer.output.dir}"/>
    <path refid="db.runtime.production.module.classpath"/>
    <path refid="core.runtime.production.module.classpath"/>
    <path refid="library.webharvest.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="yandex-auto-clusterizer.module.classpath">
    <path refid="${module.jdk.classpath.yandex-auto-clusterizer}"/>
    <pathelement location="${yandex-auto-clusterizer.output.dir}"/>
    <pathelement location="${db.testoutput.dir}"/>
    <pathelement location="${db.output.dir}"/>
    <pathelement location="${core.testoutput.dir}"/>
    <pathelement location="${core.output.dir}"/>
    <path refid="library.webharvest.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="yandex-auto-clusterizer.runtime.module.classpath">
    <pathelement location="${yandex-auto-clusterizer.testoutput.dir}"/>
    <pathelement location="${yandex-auto-clusterizer.output.dir}"/>
    <path refid="db.runtime.module.classpath"/>
    <path refid="core.runtime.module.classpath"/>
    <path refid="library.webharvest.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.yandex-auto-clusterizer">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.yandex-auto-clusterizer">
    <patternset refid="excluded.from.module.yandex-auto-clusterizer"/>
  </patternset>
  
  <path id="yandex-auto-clusterizer.module.sourcepath">
    <dirset dir="${module.yandex-auto-clusterizer.basedir}">
      <include name="src/java"/>
      <include name="src/scripts"/>
      <include name="src/datastore"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.yandex-auto-clusterizer" depends="compile.module.yandex-auto-clusterizer.production,compile.module.yandex-auto-clusterizer.tests" description="Compile module yandex-auto-clusterizer"/>
  
  <target name="compile.module.yandex-auto-clusterizer.production" depends="compile.module.db,compile.module.core" description="Compile module yandex-auto-clusterizer; production classes">
    <mkdir dir="${yandex-auto-clusterizer.output.dir}"/>
    <javac destdir="${yandex-auto-clusterizer.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.yandex-auto-clusterizer}/javac">
      <compilerarg line="${compiler.args.yandex-auto-clusterizer}"/>
      <bootclasspath refid="yandex-auto-clusterizer.module.bootclasspath"/>
      <classpath refid="yandex-auto-clusterizer.module.production.classpath"/>
      <src refid="yandex-auto-clusterizer.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.yandex-auto-clusterizer"/>
    </javac>
    
    <copy todir="${yandex-auto-clusterizer.output.dir}">
      <fileset dir="${module.yandex-auto-clusterizer.basedir}/src/java">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.yandex-auto-clusterizer.basedir}/src/scripts">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.yandex-auto-clusterizer.basedir}/src/datastore">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.yandex-auto-clusterizer.tests" depends="compile.module.yandex-auto-clusterizer.production" description="compile module yandex-auto-clusterizer; test classes" unless="skip.tests"/>
  
  <target name="clean.module.yandex-auto-clusterizer" description="cleanup module">
    <delete dir="${yandex-auto-clusterizer.output.dir}"/>
    <delete dir="${yandex-auto-clusterizer.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.core, clean.module.db, clean.module.yandex-auto-clusterizer" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.core, compile.module.db, compile.module.yandex-auto-clusterizer" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>